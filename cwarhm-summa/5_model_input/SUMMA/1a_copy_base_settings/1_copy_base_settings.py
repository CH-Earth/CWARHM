# Copy base settings
# Copies the base settings into the SUMMA settings folder.

# modules
import os
from pathlib import Path
from shutil import copyfile
from datetime import datetime


# --- Control file handling
# Easy access to control file folder
controlFolder = Path('../../../0_control_files')

# Store the name of the 'active' file in a variable
controlFile = 'control_active.txt'

# Function to extract a given setting from the control file
def read_from_control( file, setting ):
    
    # Open 'control_active.txt' and ...
    with open(file) as contents:
        for line in contents:
            
            # ... find the line with the requested setting
            if setting in line and not line.startswith('#'):
                break
    
    # Extract the setting's value
    substring = line.split('|',1)[1]      # Remove the setting's name (split into 2 based on '|', keep only 2nd part)
    substring = substring.split('#',1)[0] # Remove comments, does nothing if no '#' is found
    substring = substring.strip()         # Remove leading and trailing whitespace, tabs, newlines
       
    # Return this value    
    return substring
    
# Function to specify a default path
def make_default_path(suffix):
    
    # Get the root path
    rootPath = Path( read_from_control(controlFolder/controlFile,'root_path') )
    
    # Get the domain folder
    domainName = read_from_control(controlFolder/controlFile,'domain_name')
    domainFolder = 'domain_' + domainName
    
    # Specify the forcing path
    defaultPath = rootPath / domainFolder / suffix
    
    return defaultPath
    
    
# --- Define where the base settings are
# Base settings
base_settings_path = Path('../0_base_settings')


# --- Find where the settings need to go
# Settings path 
settings_path = read_from_control(controlFolder/controlFile,'settings_summa_path')

# Specify default path if needed
if settings_path == 'default':
    settings_path = make_default_path('settings/SUMMA') # outputs a Path()
else:
    settings_path = Path(settings_path) # make sure a user-specified path is a Path()

# Make the folder if it doesn't exist
settings_path.mkdir(parents=True, exist_ok=True)
    
    
# --- Copy the settings
# Loop over all files and copy
for file in os.listdir(base_settings_path):
    copyfile(base_settings_path/file, settings_path/file);
    
    
# --- Code provenance
# Generates a basic log file in the domain folder and copies the control file and itself there.

# Set the log path and file name
logPath = settings_path
log_suffix = '_copy_base_settings.txt'

# Create a log folder
logFolder = '_workflow_log'
Path( logPath / logFolder ).mkdir(parents=True, exist_ok=True)

# Copy this script
thisFile = '1_copy_base_settings.py'
copyfile(thisFile, logPath / logFolder / thisFile);

# Get current date and time
now = datetime.now()

# Create a log file 
logFile = now.strftime('%Y%m%d') + log_suffix
with open( logPath / logFolder / logFile, 'w') as file:
    
    lines = ['Log generated by ' + thisFile + ' on ' + now.strftime('%Y/%m/%d %H:%M:%S') + '\n',
             'Copied the SUMMA base settings.']
    for txt in lines:
        file.write(txt) 