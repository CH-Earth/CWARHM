#!/usr/bin/env python
# coding: utf-8

'''
Workflow Utility Functions

Contains commonly used functions in the SUMMA workflow generation
This functions can be directly called by other Python scripts or Jupyter Notebooks.

'''

# Modules
import os
from pathlib import Path
from shutil import copyfile
from datetime import datetime
import logging
import logging.config

# Function to extract a given setting from the control file
def read_from_control( file, setting ):
    """Read  line item  from the SUMMAworkflow (https://github.com/CH-Earth/summaWorkflow_public)
       format control file.

    Parameters
    ----------
    file : SUMMAworkflow control file path
        i.e./summaWorkflow_public/0_control_files/control_active.txt

    setting : line item of SUMMA workflow control file
        i.e. catchment_shp_name

    Returns
    -------
    substring : configuration setting from control file
        i.e. bow_distributed_elevation_zone.shp
    """
    # Open 'control_active.txt' and ...
    with open(file) as contents:
        for line in contents:
            
            # ... find the line with the requested setting
            if setting in line:
                break
    
    # Extract the setting's value
    substring = line.split('|',1)[1]      # Remove the setting's name (split into 2 based on '|', keep only 2nd part)
    substring = substring.split('#',1)[0] # Remove comments, does nothing if no '#' is found
    substring = substring.strip()         # Remove leading and trailing whitespace, tabs, newlines
       
    # Return this value    
    return substring


# Function to specify a default path
def make_default_path(suffix,controlFolder,controlFile):

    """Return a default path based on values read from the control file

    Parameters
    ----------
    suffix : str
        suffix to be used to set directory

    controlFolder : str
        complete path (without file name)

    controlFile : str
        Name of control file

    Returns
    -------
    defaultPath : str
        defaultPath for output folder
    """

    # Get the root path
    rootPath = Path(read_from_control(controlFolder / controlFile, 'root_path'))

    # Get the domain folder
    domainName = read_from_control(controlFolder / controlFile, 'domain_name')
    domainFolder = 'domain_' + domainName

    # Specify the forcing path
    defaultPath = rootPath / domainFolder / suffix

    return defaultPath

def create_log_file(logfile_folder,filename,suffix=None):
    """ Create an output log file based on an existing log configuration file.
    Note that the logger configuration file is located at ../utility_scripts/logger_config.ini

    See examples for logging.conf at https://docs.python.org/3/howto/logging.html

    Parameters
    ----------
    logfile_folder : str
        output folder for log file

    filename : str
        log file name

    suffix (optional) : str
        additional string to be added to logfile anme

    Returns
    -------
    logger :
        logger object to be used by other functions
    """
    #Construct name and location of log file
    now = datetime.now()
    suffix_str = isstr(suffix) #Returns the suffix if defined, otherwise ''
    log_file_name = now.strftime('%Y%m%d') + suffix_str + '_log.txt'
    logfile = os.path.join(logfile_folder,log_file_name)
    #Delete previous file if it exists
    if os.path.exists(logfile):
        os.remove(logfile)

    #Read in logger configuration, note it must be in same directory as this file
    logger_config_path = os.path.dirname(os.path.realpath(__file__))
    logging.config.fileConfig(os.path.join(logger_config_path,'logger_config.ini'),defaults={'logfilename': logfile},disable_existing_loggers=False)

    logger = logging.getLogger('sLogger')
    logger.info(f'Log file {logfile} generated by {filename}' + ' on ' + now.strftime('%Y/%m/%d %H:%M:%S'))

    return logger

def isstr(s):
    # Returns the suffix if defined, otherwise ''
    return '' if s is None else str(s)
